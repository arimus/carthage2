// Generated by CoffeeScript 1.9.3
(function() {
  Template.avatarPrompt.onCreated(function() {
    var self;
    self = this;
    self.suggestions = new ReactiveVar;
    self.upload = new ReactiveVar;
    self.getSuggestions = function() {
      self.suggestions.set(void 0);
      return Meteor.call('getAvatarSuggestion', function(error, avatars) {
        return self.suggestions.set({
          ready: true,
          avatars: avatars
        });
      });
    };
    return self.getSuggestions();
  });

  Template.avatarPrompt.helpers({
    suggestions: function() {
      return Template.instance().suggestions.get();
    },
    upload: function() {
      return Template.instance().upload.get();
    },
    username: function() {
      var ref;
      return (ref = Meteor.user()) != null ? ref.username : void 0;
    }
  });

  Template.avatarPrompt.events({
    'click .select-service': function(e) {
      return Meteor.call('setAvatarFromService', this.blob, this.contentType, this.service, function() {
        return Session.set('AvatarRandom', Date.now());
      });
    },
    'click .login-with-service': function(event, template) {
      var loginWithService, serviceConfig;
      loginWithService = "loginWith" + (_.capitalize(this));
      serviceConfig = {};
      return Meteor[loginWithService](serviceConfig, function(error) {
        if ((error != null ? error.error : void 0) === 'github-no-public-email') {
          alert(t("github_no_public_email"));
          return;
        }
        console.log(error);
        if (error != null) {
          toastr.error(error.message);
          return;
        }
        return template.getSuggestions();
      });
    },
    'change .avatar-file-input': function(event, template) {
      var blob, e, files, i, len, reader, ref;
      e = event.originalEvent || event;
      files = e.target.files;
      if (!files || files.length === 0) {
        files = ((ref = e.dataTransfer) != null ? ref.files : void 0) || [];
      }
      for (i = 0, len = files.length; i < len; i++) {
        blob = files[i];
        if (!/image\/.+/.test(blob.type)) {
          return;
        }
        reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = function() {
          return template.upload.set({
            service: 'upload',
            contentType: blob.type,
            blob: reader.result
          });
        };
      }
    }
  });

}).call(this);
