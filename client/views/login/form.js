// Generated by CoffeeScript 1.9.3
(function() {
  Template.loginForm.helpers({
    userName: function() {
      var ref;
      return (ref = Meteor.user()) != null ? ref.username : void 0;
    },
    showName: function() {
      if (Template.instance().state.get() !== 'register') {
        return 'hidden';
      }
    },
    showPassword: function() {
      var ref;
      if ((ref = Template.instance().state.get()) !== 'login' && ref !== 'register') {
        return 'hidden';
      }
    },
    showConfirmPassword: function() {
      if (Template.instance().state.get() !== 'register') {
        return 'hidden';
      }
    },
    showEmailOrUsername: function() {
      if (Template.instance().state.get() !== 'login') {
        return 'hidden';
      }
    },
    showEmail: function() {
      var ref;
      if ((ref = Template.instance().state.get()) !== 'register' && ref !== 'forgot-password' && ref !== 'email-verification') {
        return 'hidden';
      }
    },
    showRegisterLink: function() {
      if (Template.instance().state.get() !== 'login') {
        return 'hidden';
      }
    },
    showForgotPasswordLink: function() {
      if (Template.instance().state.get() !== 'login') {
        return 'hidden';
      }
    },
    showBackToLoginLink: function() {
      var ref;
      if ((ref = Template.instance().state.get()) !== 'register' && ref !== 'forgot-password' && ref !== 'email-verification') {
        return 'hidden';
      }
    },
    btnLoginSave: function() {
      switch (Template.instance().state.get()) {
        case 'register':
          return t('Submit');
        case 'login':
          return t('Login');
        case 'email-verification':
          return t('Send_confirmation_email');
        case 'forgot-password':
          return t('Reset_password');
      }
    }
  });

  Template.loginForm.events({
    'submit #login-card': function(event, instance) {
      var button, formData;
      event.preventDefault();
      button = $(event.target).find('button.login');
      RocketChat.Button.loading(button);
      formData = instance.validate();
      if (formData) {
        if (instance.state.get() === 'email-verification') {
          Meteor.call('sendConfirmationEmail', formData.email, function(err, result) {
            RocketChat.Button.reset(button);
            toastr.success(t('We_have_sent_registration_email'));
            return instance.state.set('login');
          });
          return;
        }
        if (instance.state.get() === 'forgot-password') {
          Meteor.call('sendForgotPasswordEmail', formData.email, function(err, result) {
            RocketChat.Button.reset(button);
            toastr.success(t('We_have_sent_password_email'));
            return instance.state.set('login');
          });
          return;
        }
        if (instance.state.get() === 'register') {
          return Meteor.call('registerUser', formData, function(err, result) {
            RocketChat.Button.reset(button);
            return Meteor.loginWithPassword(formData.email, formData.pass, function(error) {
              if ((error != null ? error.error : void 0) === 'no-valid-email') {
                toastr.success(t('We_have_sent_registration_email'));
                return instance.state.set('login');
              }
            });
          });
        } else {
          return Meteor.loginWithPassword(formData.emailOrUsername, formData.pass, function(error) {
            RocketChat.Button.reset(button);
            if (error != null) {
              if (error.error === 'no-valid-email') {
                instance.state.set('email-verification');
              } else {
                toastr.error(error.reason);
              }
              return;
            }
            return FlowRouter.go('index');
          });
        }
      }
    },
    'click .register': function() {
      return Template.instance().state.set('register');
    },
    'click .back-to-login': function() {
      return Template.instance().state.set('login');
    },
    'click .forgot-password': function() {
      return Template.instance().state.set('forgot-password');
    }
  });

  Template.loginForm.onCreated(function() {
    var instance;
    instance = this;
    this.state = new ReactiveVar('login');
    return this.validate = function() {
      var button, field, formData, formObj, i, key, len, validationObj;
      formData = $("#login-card").serializeArray();
      formObj = {};
      validationObj = {};
      for (i = 0, len = formData.length; i < len; i++) {
        field = formData[i];
        formObj[field.name] = field.value;
      }
      if (instance.state.get() !== 'login') {
        if (!(formObj['email'] && /\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]+\b/i.test(formObj['email']))) {
          validationObj['email'] = t('Invalid_email');
        }
      }
      if (instance.state.get() !== 'forgot-password') {
        if (!formObj['pass']) {
          validationObj['pass'] = t('Invalid_pass');
        }
      }
      if (instance.state.get() === 'register') {
        if (!formObj['name']) {
          validationObj['name'] = t('Invalid_name');
        }
        if (formObj['confirm-pass'] !== formObj['pass']) {
          validationObj['confirm-pass'] = t('Invalid_confirm_pass');
        }
      }
      $("#login-card input").removeClass("error");
      if (!_.isEmpty(validationObj)) {
        button = $('#login-card').find('button.login');
        RocketChat.Button.reset(button);
        $("#login-card h2").addClass("error");
        for (key in validationObj) {
          $("#login-card input[name=" + key + "]").addClass("error");
        }
        return false;
      }
      $("#login-card h2").removeClass("error");
      $("#login-card input.error").removeClass("error");
      return formObj;
    };
  });

  Template.loginForm.onRendered(function() {
    return Tracker.autorun((function(_this) {
      return function() {
        switch (_this.state.get()) {
          case 'login':
          case 'forgot-password':
          case 'email-verification':
            return Meteor.defer(function() {
              return $('input[name=email]').select().focus();
            });
          case 'register':
            return Meteor.defer(function() {
              return $('input[name=name]').select().focus();
            });
        }
      };
    })(this));
  });

}).call(this);
