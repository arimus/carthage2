// Generated by CoffeeScript 1.9.3
(function() {
  Template.body.onRendered(function() {
    var dataLayerComputation, metaFBComputation, metaGoogleComputation, metaLanguageComputation, metaMSValidateComputation, metaRobotsComputation;
    dataLayerComputation = Tracker.autorun(function() {
      var d, i, l, s, w;
      w = window;
      d = document;
      s = 'script';
      l = 'dataLayer';
      i = RocketChat.settings.get('API_Analytics');
      if (Match.test(i, String) && i.trim() !== '') {
        if (dataLayerComputation != null) {
          dataLayerComputation.stop();
        }
        return (function(w, d, s, l, i) {
          var dl, f, j;
          w[l] = w[l] || [];
          w[l].push({
            'gtm.start': new Date().getTime(),
            event: 'gtm.js'
          });
          f = d.getElementsByTagName(s)[0];
          j = d.createElement(s);
          dl = l !== 'dataLayer' ? '&l=' + l : '';
          j.async = true;
          j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl;
          return f.parentNode.insertBefore(j, f);
        })(w, d, s, l, i);
      }
    });
    metaLanguageComputation = Tracker.autorun(function() {
      if (RocketChat.settings.get('Meta:language')) {
        if (metaLanguageComputation != null) {
          metaLanguageComputation.stop();
        }
        Meta.set({
          name: 'http-equiv',
          property: 'content-language',
          content: RocketChat.settings.get('Meta:language')
        });
        return Meta.set({
          name: 'name',
          property: 'language',
          content: RocketChat.settings.get('Meta:language')
        });
      }
    });
    metaFBComputation = Tracker.autorun(function() {
      if (RocketChat.settings.get('Meta:fb:app_id')) {
        if (metaFBComputation != null) {
          metaFBComputation.stop();
        }
        return Meta.set({
          name: 'property',
          property: 'fb:app_id',
          content: RocketChat.settings.get('Meta:fb:app_id')
        });
      }
    });
    metaRobotsComputation = Tracker.autorun(function() {
      if (RocketChat.settings.get('Meta:robots')) {
        if (metaRobotsComputation != null) {
          metaRobotsComputation.stop();
        }
        return Meta.set({
          name: 'name',
          property: 'robots',
          content: RocketChat.settings.get('Meta:robots')
        });
      }
    });
    metaGoogleComputation = Tracker.autorun(function() {
      if (RocketChat.settings.get('Meta:google-site-verification')) {
        if (metaGoogleComputation != null) {
          metaGoogleComputation.stop();
        }
        return Meta.set({
          name: 'name',
          property: 'google-site-verification',
          content: RocketChat.settings.get('Meta:google-site-verification')
        });
      }
    });
    return metaMSValidateComputation = Tracker.autorun(function() {
      if (RocketChat.settings.get('Meta:msvalidate.01')) {
        if (metaMSValidateComputation != null) {
          metaMSValidateComputation.stop();
        }
        return Meta.set({
          name: 'name',
          property: 'msvalidate.01',
          content: RocketChat.settings.get('Meta:msvalidate.01')
        });
      }
    });
  });

  Template.main.helpers({
    logged: function() {
      return Meteor.userId() != null;
    },
    subsReady: function() {
      return (Meteor.userId() == null) || (FlowRouter.subsReady('userData', 'activeUsers'));
    },
    hasUsername: function() {
      return (Meteor.userId() != null) && (Meteor.user().username != null);
    },
    hasAvatar: function() {
      return (Meteor.userId() != null) && (Meteor.user().avatarOrigin != null);
    },
    flexOpened: function() {
      if (window.rocketDebug) {
        console.log('layout.helpers flexOpened');
      }
      if (Session.equals('flexOpened', true)) {
        return 'flex-opened';
      }
    },
    flexOpenedRTC1: function() {
      if (window.rocketDebug) {
        console.log('layout.helpers flexOpenedRTC1');
      }
      if (Session.equals('rtcLayoutmode', 1)) {
        return 'layout1';
      }
    },
    flexOpenedRTC2: function() {
      if (window.rocketDebug) {
        console.log('layout.helpers flexOpenedRTC2');
      }
      if (Session.get('rtcLayoutmode') > 1) {
        return 'layout2';
      }
    }
  });

  Template.main.onRendered(function() {
    $('html').addClass("noscroll").removeClass("scroll");
    if (isRtl(localStorage.getItem("userLanguage"))) {
      return $('html').addClass("rtl");
    }
  });

}).call(this);
