// Generated by CoffeeScript 1.9.3
(function() {
  var getCursorPosition, setCursorPosition, val;

  getCursorPosition = function(input) {
    var sel, selLen;
    if (input == null) {
      return;
    }
    if (input.selectionStart != null) {
      return input.selectionStart;
    } else if (document.selection != null) {
      input.focus();
      sel = document.selection.createRange();
      selLen = document.selection.createRange().text.length;
      sel.moveStart('character', -input.value.length);
      return sel.text.length - selLen;
    }
  };

  setCursorPosition = function(input, caretPos) {
    var range;
    if (input == null) {
      return;
    }
    if (input.selectionStart != null) {
      input.focus();
      return input.setSelectionRange(caretPos, caretPos);
    } else if (document.selection != null) {
      range = input.createTextRange();
      range.move('character', caretPos);
      return range.select();
    }
  };

  val = function(v, d) {
    if (v != null) {
      return v;
    } else {
      return d;
    }
  };

  Template.messagePopup.onCreated(function() {
    var template;
    template = this;
    template.textFilter = new ReactiveVar('');
    template.open = new ReactiveVar(false);
    template.value = new ReactiveVar;
    template.trigger = val(template.data.trigger, '@');
    template.prefix = val(template.data.prefix, template.trigger);
    template.suffix = val(template.data.suffix, ' ');
    template.matchSelectorRegex = val(template.data.matchSelectorRegex, new RegExp("(?:^| )" + template.trigger + "[A-Za-z0-9-_]*$"));
    template.selectorRegex = val(template.data.selectorRegex, new RegExp(template.trigger + "([A-Za-z0-9-_]*)$"));
    template.replaceRegex = val(template.data.replaceRegex, new RegExp(template.trigger + "[A-Za-z0-9-_]*$"));
    template.getValue = val(template.data.getValue, function(_id) {
      return _id;
    });
    template.up = (function(_this) {
      return function() {
        var current, previous;
        current = template.find('.popup-item.selected');
        previous = current.previousElementSibling || template.find('.popup-item:last-child');
        if (previous != null) {
          current.className = current.className.replace(/\sselected/, '');
          previous.className += ' selected';
          return template.value.set(previous.getAttribute('data-id'));
        }
      };
    })(this);
    template.down = (function(_this) {
      return function() {
        var current, next;
        current = template.find('.popup-item.selected');
        next = current.nextElementSibling || template.find('.popup-item');
        if (next != null) {
          current.className = current.className.replace(/\sselected/, '');
          next.className += ' selected';
          return template.value.set(next.getAttribute('data-id'));
        }
      };
    })(this);
    template.verifySelection = (function(_this) {
      return function() {
        var current, first;
        current = template.find('.popup-item.selected');
        if (current == null) {
          first = template.find('.popup-item');
          if (first != null) {
            first.className += ' selected';
            return template.value.set(first.getAttribute('data-id'));
          }
        }
      };
    })(this);
    template.onInputKeydown = (function(_this) {
      return function(event) {
        var ref, ref1;
        if (template.open.curValue !== true) {
          return;
        }
        if ((ref = event.which) === 38 || ref === 40) {
          event.preventDefault();
          event.stopPropagation();
        }
        if ((ref1 = event.which) === 13 || ref1 === 9) {
          template.open.set(false);
          template.enterValue();
          event.preventDefault();
          return event.stopPropagation();
        }
      };
    })(this);
    template.onInputKeyup = (function(_this) {
      return function(event) {
        var value;
        if (template.open.curValue === true && event.which === 27) {
          template.open.set(false);
          event.preventDefault();
          event.stopPropagation();
          return;
        }
        value = template.input.value;
        value = value.substr(0, getCursorPosition(template.input));
        if (template.matchSelectorRegex.test(value)) {
          template.textFilter.set(value.match(template.selectorRegex)[1]);
          template.open.set(true);
        } else {
          template.open.set(false);
        }
        if (template.open.curValue !== true) {
          return;
        }
        if (event.which === 38) {
          return template.up();
        } else if (event.which === 40) {
          return template.down();
        } else {
          return Meteor.defer(function() {
            return template.verifySelection();
          });
        }
      };
    })(this);
    return template.enterValue = function() {
      var caret, firstPartValue, lastPartValue, value;
      value = template.input.value;
      caret = getCursorPosition(template.input);
      firstPartValue = value.substr(0, caret);
      lastPartValue = value.substr(caret);
      firstPartValue = firstPartValue.replace(template.selectorRegex, template.prefix + this.getValue(template.value.curValue, template.data.collection) + template.suffix);
      template.input.value = firstPartValue + lastPartValue;
      return setCursorPosition(template.input, firstPartValue.length);
    };
  });

  Template.messagePopup.onRendered(function() {
    var base;
    this.input = typeof (base = this.data).getInput === "function" ? base.getInput() : void 0;
    $(this.input).on('keyup', this.onInputKeyup.bind(this));
    return $(this.input).on('keydown', this.onInputKeydown.bind(this));
  });

  Template.messagePopup.onDestroyed(function() {
    $(this.input).off('keyup', this.onInputKeyup);
    return $(this.input).off('keydown', this.onInputKeydown);
  });

  Template.messagePopup.events({
    'mouseenter .popup-item': function(e) {
      var current, template;
      if (e.currentTarget.className.indexOf('selected') > -1) {
        return;
      }
      template = Template.instance();
      current = template.find('.popup-item.selected');
      if (current != null) {
        current.className = current.className.replace(/\sselected/, '');
      }
      e.currentTarget.className += ' selected';
      return template.value.set(this._id);
    },
    'click .popup-item': function(e) {
      var template;
      template = Template.instance();
      template.value.set(this._id);
      template.enterValue();
      return template.open.set(false);
    }
  });

  Template.messagePopup.helpers({
    isOpen: function() {
      return Template.instance().open.get();
    },
    data: function() {
      var filter, result, template;
      template = Template.instance();
      filter = template.textFilter.get();
      result = template.data.getFilter(template.data.collection, filter);
      if ((template.data.collection instanceof Meteor.Collection && result.count() === 0) || (result != null ? result.length : void 0) === 0) {
        template.open.set(false);
      }
      return result;
    }
  });

}).call(this);
