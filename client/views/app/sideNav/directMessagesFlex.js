// Generated by CoffeeScript 1.9.3
(function() {
  Template.directMessagesFlex.helpers({
    error: function() {
      return Template.instance().error.get();
    },
    autocompleteSettings: function() {
      return {
        limit: 10,
        rules: [
          {
            collection: 'UserAndRoom',
            subscription: 'roomSearch',
            field: 'username',
            template: Template.userSearch,
            noMatchTemplate: Template.userSearchEmpty,
            matchAll: true,
            filter: {
              type: 'u',
              _id: {
                $ne: Meteor.userId()
              }
            },
            sort: 'username'
          }
        ]
      };
    }
  });

  Template.directMessagesFlex.events({
    'autocompleteselect #who': function(event, instance, doc) {
      instance.selectedUser.set(doc.username);
      return event.currentTarget.focus();
    },
    'click .cancel-direct-message': function(e, instance) {
      SideNav.closeFlex();
      return instance.clearForm();
    },
    'click header': function(e, instance) {
      SideNav.closeFlex();
      return instance.clearForm();
    },
    'mouseenter header': function() {
      return SideNav.overArrow();
    },
    'mouseleave header': function() {
      return SideNav.leaveArrow();
    },
    'keydown input[type="text"]': function(e, instance) {
      return Template.instance().error.set([]);
    },
    'click .save-direct-message': function(e, instance) {
      var err;
      err = SideNav.validate();
      if (!err) {
        return Meteor.call('createDirectMessage', instance.selectedUser.get(), function(err, result) {
          if (err) {
            return toastr.error(err.reason);
          }
          SideNav.closeFlex();
          instance.clearForm();
          return FlowRouter.go('room', {
            _id: result.rid
          });
        });
      } else {
        return Template.instance().error.set(err);
      }
    }
  });

  Template.directMessagesFlex.onCreated(function() {
    var instance;
    instance = this;
    instance.selectedUser = new ReactiveVar;
    instance.error = new ReactiveVar([]);
    return instance.clearForm = function() {
      instance.error.set([]);
      instance.selectedUser.set(null);
      return instance.find('#who').value = '';
    };
  });

}).call(this);
