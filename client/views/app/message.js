// Generated by CoffeeScript 1.9.3
(function() {
  Template.message.helpers({
    own: function() {
      var ref;
      if (((ref = this.u) != null ? ref._id : void 0) === Meteor.userId()) {
        return 'own';
      }
    },
    time: function() {
      return moment(this.ts).format('HH:mm');
    },
    date: function() {
      return moment(this.ts).format('LL');
    },
    body: function() {
      var message;
      switch (this.t) {
        case 'r':
          return t('Room_name_changed', {
            room_name: this.msg,
            user_by: this.u.username
          });
        case 'au':
          return t('User_added_by', {
            user_added: this.msg,
            user_by: this.u.username
          });
        case 'ru':
          return t('User_removed_by', {
            user_removed: this.msg,
            user_by: this.u.username
          });
        case 'ul':
          return tr('User_left', {
            context: this.u.gender
          }, {
            user_left: this.u.username
          });
        case 'nu':
          return t('User_added', {
            user_added: this.u.username
          });
        case 'uj':
          return tr('User_joined_channel', {
            context: this.u.gender
          }, {
            user: this.u.username
          });
        case 'wm':
          return t('Welcome', {
            user: this.u.username
          });
        case 'rtc':
          return RocketChat.callbacks.run('renderRtcMessage', this);
        default:
          this.html = this.msg;
          if (_.trim(this.html) !== '') {
            this.html = _.escapeHTML(this.html);
          }
          message = RocketChat.callbacks.run('renderMessage', this);
          this.html = message.html.replace(/\n/gm, '<br/>');
          return this.html;
      }
    },
    system: function() {
      var ref;
      if ((ref = this.t) === 's' || ref === 'p' || ref === 'f' || ref === 'r' || ref === 'au' || ref === 'ru' || ref === 'ul' || ref === 'nu' || ref === 'wm' || ref === 'uj') {
        return 'system';
      }
    }
  });

  Template.message.onViewRendered = function(context) {
    var view;
    view = this;
    return this._domrange.onAttached(function(domRange) {
      var fn, i, item, lastNode, len, newMessage, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, ul, wrapper;
      lastNode = domRange.lastNode();
      if (((ref = lastNode.previousElementSibling) != null ? (ref1 = ref.dataset) != null ? ref1.date : void 0 : void 0) !== lastNode.dataset.date) {
        $(lastNode).addClass('new-day');
        $(lastNode).removeClass('sequential');
      } else if (((ref2 = lastNode.previousElementSibling) != null ? (ref3 = ref2.dataset) != null ? ref3.username : void 0 : void 0) !== lastNode.dataset.username) {
        $(lastNode).removeClass('sequential');
      }
      if (((ref4 = lastNode.nextElementSibling) != null ? (ref5 = ref4.dataset) != null ? ref5.date : void 0 : void 0) === lastNode.dataset.date) {
        $(lastNode.nextElementSibling).removeClass('new-day');
        $(lastNode.nextElementSibling).addClass('sequential');
      } else {
        $(lastNode.nextElementSibling).addClass('new-day');
        $(lastNode.nextElementSibling).removeClass('sequential');
      }
      if (((ref6 = lastNode.nextElementSibling) != null ? (ref7 = ref6.dataset) != null ? ref7.username : void 0 : void 0) !== lastNode.dataset.username) {
        $(lastNode.nextElementSibling).removeClass('sequential');
      }
      ul = lastNode.parentElement;
      wrapper = ul.parentElement;
      if (((ref8 = context.urls) != null ? ref8.length : void 0) > 0) {
        ref9 = context.urls;
        fn = function(item) {
          var urlNode;
          urlNode = lastNode.querySelector('.body a[href="' + item.url + '"]');
          if (urlNode != null) {
            return $(urlNode).replaceWith(Blaze.toHTMLWithData(Template.oembedBaseWidget, item));
          }
        };
        for (i = 0, len = ref9.length; i < len; i++) {
          item = ref9[i];
          fn(item);
        }
      }
      if (lastNode.nextElementSibling == null) {
        if (lastNode.classList.contains('own') === true) {
          return view.parentView.parentView.parentView.parentView.parentView.templateInstance().atBottom = true;
        } else {
          if (view.parentView.parentView.parentView.parentView.parentView.templateInstance().atBottom !== true) {
            newMessage = document.querySelector(".new-message");
            return newMessage.className = "new-message";
          }
        }
      }
    });
  };

}).call(this);
