// Generated by CoffeeScript 1.9.3
(function() {
  Template.messagePopupConfig.helpers({
    popupUserConfig: function() {
      var config, self, template;
      self = this;
      template = Template.instance();
      config = {
        title: 'People',
        collection: Meteor.users,
        template: 'messagePopupUser',
        getInput: self.getInput,
        getFilter: function(collection, filter) {
          var exp;
          exp = new RegExp(filter, 'i');
          return collection.find({
            username: {
              $exists: true
            },
            $or: [
              {
                name: exp
              }, {
                username: exp
              }
            ]
          }, {
            limit: 10
          });
        },
        getValue: function(_id, collection) {
          var ref;
          return (ref = collection.findOne(_id)) != null ? ref.username : void 0;
        }
      };
      return config;
    },
    popupChannelConfig: function() {
      var config, self, template;
      self = this;
      template = Template.instance();
      config = {
        title: 'Channels',
        collection: ChatRoom,
        trigger: '#',
        template: 'messagePopupChannel',
        getInput: self.getInput,
        getFilter: function(collection, filter) {
          return collection.find({
            t: 'c',
            name: new RegExp(filter, 'i')
          }, {
            limit: 10
          });
        },
        getValue: function(_id, collection) {
          var ref;
          return (ref = collection.findOne(_id)) != null ? ref.name : void 0;
        }
      };
      return config;
    },
    popupEmojiConfig: function() {
      var config, self, template;
      self = this;
      template = Template.instance();
      config = {
        title: 'Emoji',
        collection: emojione.emojioneList,
        template: 'messagePopupEmoji',
        trigger: ':',
        prefix: '',
        getInput: self.getInput,
        getFilter: function(collection, filter) {
          var data, results, shortname;
          results = [];
          for (shortname in collection) {
            data = collection[shortname];
            if (shortname.indexOf(filter) > -1) {
              results.push({
                _id: shortname,
                data: data
              });
            }
            if (results.length > 10) {
              break;
            }
          }
          if (filter.length >= 3) {
            results.sort(function(a, b) {
              return a.length > b.length;
            });
          }
          return results;
        }
      };
      return config;
    }
  });

}).call(this);
