// Generated by CoffeeScript 1.9.3
(function() {
  this.RoomHistoryManager = new ((function() {
    var clear, defaultLimit, getMore, getMoreIfIsEmpty, getRoom, hasMore, histories, isLoading;

    function _Class() {}

    defaultLimit = 50;

    histories = {};

    getRoom = function(rid) {
      if (histories[rid] == null) {
        histories[rid] = {
          hasMore: ReactiveVar(true),
          isLoading: ReactiveVar(false),
          loaded: 0
        };
      }
      return histories[rid];
    };

    getMore = function(rid, limit) {
      var lastMessage, room, ts;
      if (limit == null) {
        limit = defaultLimit;
      }
      room = getRoom(rid);
      if (room.hasMore.curValue !== true) {
        return;
      }
      room.isLoading.set(true);
      lastMessage = ChatMessageHistory.findOne({
        rid: rid
      }, {
        sort: {
          ts: 1
        }
      });
      if (lastMessage != null) {
        ts = lastMessage.ts;
      } else {
        ts = new Date;
      }
      return Meteor.call('loadHistory', rid, ts, limit, 0, function(err, result) {
        var i, item, len;
        for (i = 0, len = result.length; i < len; i++) {
          item = result[i];
          ChatMessageHistory.insert(item);
        }
        room.isLoading.set(false);
        room.loaded += result.length;
        if (result.length < limit) {
          return room.hasMore.set(false);
        }
      });
    };

    hasMore = function(rid) {
      var room;
      room = getRoom(rid);
      return room.hasMore.get();
    };

    getMoreIfIsEmpty = function(rid) {
      var room;
      room = getRoom(rid);
      if (room.loaded === 0) {
        return getMore(rid);
      }
    };

    isLoading = function(rid) {
      var room;
      room = getRoom(rid);
      return room.isLoading.get();
    };

    clear = function(rid) {
      ChatMessageHistory.remove({
        rid: rid
      });
      if (histories[rid] != null) {
        histories[rid].hasMore.set(true);
        histories[rid].isLoading.set(false);
        return histories[rid].loaded = 0;
      }
    };

    _Class.prototype.getMore = getMore;

    _Class.prototype.getMoreIfIsEmpty = getMoreIfIsEmpty;

    _Class.prototype.hasMore = hasMore;

    _Class.prototype.isLoading = isLoading;

    _Class.prototype.clear = clear;

    return _Class;

  })());

}).call(this);
