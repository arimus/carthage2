// Generated by CoffeeScript 1.9.3
(function() {
  this.RoomManager = new ((function() {
    var Dep, close, computation, defaultTime, existsDomOfRoom, getDomOfRoom, init, msgStream, open, openedRooms, setRoomExpireExcept, subscription;

    function _Class() {}

    defaultTime = 600000;

    openedRooms = {};

    subscription = null;

    msgStream = new Meteor.Stream('messages');

    Dep = new Tracker.Dependency;

    init = function() {
      subscription = Meteor.subscribe('subscription');
      return subscription;
    };

    close = function(rid) {
      var i, len, ref, sub;
      if (openedRooms[rid]) {
        if (openedRooms[rid].sub != null) {
          ref = openedRooms[rid].sub;
          for (i = 0, len = ref.length; i < len; i++) {
            sub = ref[i];
            sub.stop();
          }
        }
        msgStream.removeListener(rid);
        openedRooms[rid].ready = false;
        openedRooms[rid].active = false;
        delete openedRooms[rid].timeout;
        delete openedRooms[rid].dom;
        return ChatMessageHistory.remove({
          rid: rid
        });
      }
    };

    computation = Tracker.autorun(function() {
      var record, results, rid;
      results = [];
      for (rid in openedRooms) {
        record = openedRooms[rid];
        if (!(record.active === true)) {
          continue;
        }
        record.sub = [Meteor.subscribe('room', rid)];
        record.ready = record.sub[0].ready();
        results.push(Dep.changed());
      }
      return results;
    });

    setRoomExpireExcept = function(except) {
      var ref, results, rid;
      if (((ref = openedRooms[except]) != null ? ref.timeout : void 0) != null) {
        clearTimeout(openedRooms[except].timeout);
        delete openedRooms[except].timeout;
      }
      results = [];
      for (rid in openedRooms) {
        if (rid !== except && (openedRooms[rid].timeout == null)) {
          results.push(openedRooms[rid].timeout = setTimeout(close, defaultTime, rid));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    open = function(rid) {
      if (openedRooms[rid] == null) {
        openedRooms[rid] = {
          active: false,
          ready: false
        };
      }
      setRoomExpireExcept(rid);
      if (subscription.ready()) {
        if (openedRooms[rid].active !== true) {
          openedRooms[rid].active = true;
          msgStream.on(rid, function(msg) {
            var ref;
            if (msg._deleted != null) {
              return ChatMessageHistory.remove({
                _id: msg._id
              });
            }
            if (((ref = msg.u) != null ? ref._id : void 0) === Meteor.userId()) {
              return;
            }
            return ChatMessageHistory.upsert({
              _id: msg._id
            }, msg);
          });
          computation.invalidate();
        }
      }
      return {
        ready: function() {
          Dep.depend();
          return openedRooms[rid].ready;
        }
      };
    };

    getDomOfRoom = function(rid) {
      var room;
      room = openedRooms[rid];
      if (room == null) {
        return;
      }
      if (room.dom == null) {
        room.dom = document.createElement('div');
        room.dom.classList.add('room-container');
        Blaze.renderWithData(Template.room, {
          _id: rid
        }, room.dom);
      }
      return room.dom;
    };

    existsDomOfRoom = function(rid) {
      var room;
      room = openedRooms[rid];
      return (room != null ? room.dom : void 0) != null;
    };

    _Class.prototype.open = open;

    _Class.prototype.close = close;

    _Class.prototype.init = init;

    _Class.prototype.getDomOfRoom = getDomOfRoom;

    _Class.prototype.existsDomOfRoom = existsDomOfRoom;

    _Class.prototype.msgStream = msgStream;

    _Class.prototype.openedRooms = openedRooms;

    return _Class;

  })());

}).call(this);
