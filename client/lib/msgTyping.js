// Generated by CoffeeScript 1.9.3
(function() {
  this.MsgTyping = (function() {
    var addStream, dep, get, renew, renewTimeout, selfTyping, start, stop, stream, timeout, timeouts, usersTyping;
    stream = new Meteor.Stream('typing');
    timeout = 15000;
    timeouts = {};
    renew = true;
    renewTimeout = 10000;
    selfTyping = new ReactiveVar(false);
    usersTyping = {};
    dep = new Tracker.Dependency;
    addStream = function(room) {
      var ref;
      if (_.isEmpty((ref = usersTyping[room]) != null ? ref.users : void 0)) {
        usersTyping[room] = {
          users: {}
        };
        return stream.on(room, function(typing) {
          var ref1, users;
          if (typing.username !== ((ref1 = Meteor.user()) != null ? ref1.username : void 0)) {
            if (typing.start) {
              users = usersTyping[room].users;
              users[typing.username] = Meteor.setTimeout(function() {
                delete users[typing.username];
                usersTyping[room].users = users;
                return dep.changed();
              }, timeout);
              usersTyping[room].users = users;
              return dep.changed();
            } else if (typing.stop) {
              users = usersTyping[room].users;
              delete users[typing.username];
              usersTyping[room].users = users;
              return dep.changed();
            }
          }
        });
      }
    };
    Tracker.autorun(function() {
      if (Session.get('openedRoom')) {
        return addStream(Session.get('openedRoom'));
      }
    });
    start = function(room) {
      if (!renew) {
        return;
      }
      setTimeout(function() {
        return renew = true;
      }, renewTimeout);
      renew = false;
      selfTyping.set(true);
      stream.emit('typing', {
        room: room,
        username: Meteor.user().username,
        start: true
      });
      clearTimeout(timeouts[room]);
      return timeouts[room] = Meteor.setTimeout(function() {
        return stop(room);
      }, timeout);
    };
    stop = function(room) {
      renew = true;
      selfTyping.set(false);
      if ((timeouts != null ? timeouts[room] : void 0) != null) {
        clearTimeout(timeouts[room]);
        timeouts[room] = null;
      }
      return stream.emit('typing', {
        room: room,
        username: Meteor.user().username,
        stop: true
      });
    };
    get = function(room) {
      var users;
      dep.depend();
      if (!usersTyping[room]) {
        usersTyping[room] = {
          users: {}
        };
      }
      users = usersTyping[room].users;
      return _.keys(users) || [];
    };
    return {
      start: start,
      stop: stop,
      get: get,
      selfTyping: selfTyping
    };
  })();

}).call(this);
