// Generated by CoffeeScript 1.9.3
(function() {
  this.SideNav = (function() {
    var animating, arrow, arrowBindHover, closeFlex, flexNav, flexStatus, focusInput, getFlex, init, leaveArrow, openFlex, overArrow, setFlex, sideNav, toggleArrow, toggleCurrent, toggleFlex, validate;
    sideNav = {};
    flexNav = {};
    arrow = {};
    animating = false;
    toggleArrow = function(status) {
      if (arrow.hasClass("left" || (status != null) === -1)) {
        arrow.removeClass("left");
        return;
      }
      if (!arrow.hasClass("left" || (status != null) === 1)) {
        return arrow.addClass("left");
      }
    };
    toggleCurrent = function() {
      if (flexNav.opened) {
        return closeFlex();
      } else {
        return AccountBox.toggle();
      }
    };
    overArrow = function() {
      return arrow.addClass("hover");
    };
    leaveArrow = function() {
      return arrow.removeClass("hover");
    };
    arrowBindHover = function() {
      arrow.on("mouseenter", function() {
        return sideNav.find("header").addClass("hover");
      });
      return arrow.on("mouseout", function() {
        return sideNav.find("header").removeClass("hover");
      });
    };
    focusInput = function() {
      setTimeout(function() {
        var ref;
        return (ref = sideNav.find("input[type='text']:first")) != null ? ref.focus() : void 0;
      }, 200);
    };
    validate = function() {
      var invalid;
      invalid = [];
      sideNav.find("input.required").each(function() {
        if (!this.value.length) {
          return invalid.push($(this).prev("label").html());
        }
      });
      if (invalid.length) {
        return invalid;
      }
      return false;
    };
    toggleFlex = function(status, callback) {
      if (callback == null) {
        callback = null;
      }
      if (animating === true) {
        return;
      }
      animating = true;
      if (flexNav.opened || (status != null) === -1) {
        flexNav.opened = false;
        flexNav.addClass("hidden");
        setTimeout(function() {
          animating = false;
          return typeof callback === "function" ? callback() : void 0;
        }, 350);
        return;
      }
      if (!flexNav.opened || (status != null) === 1) {
        flexNav.opened = true;
        setTimeout(function() {
          return flexNav.removeClass("hidden");
        }, 50);
        return setTimeout(function() {
          animating = false;
          return typeof callback === "function" ? callback() : void 0;
        }, 500);
      }
    };
    openFlex = function(callback) {
      if (callback == null) {
        callback = null;
      }
      if (animating === true) {
        return;
      }
      toggleArrow(1);
      toggleFlex(1, callback);
      return focusInput();
    };
    closeFlex = function(callback) {
      if (callback == null) {
        callback = null;
      }
      if (animating === true) {
        return;
      }
      toggleArrow(-1);
      return toggleFlex(-1, callback);
    };
    flexStatus = function() {
      return flexNav.opened;
    };
    setFlex = function(template, data) {
      if (data == null) {
        data = {};
      }
      Session.set("flex-nav-template", template);
      return Session.set("flex-nav-data", data);
    };
    getFlex = function() {
      return {
        template: Session.get("flex-nav-template"),
        data: Session.get("flex-nav-data")
      };
    };
    init = function() {
      sideNav = $(".side-nav");
      flexNav = sideNav.find(".flex-nav");
      arrow = sideNav.children(".arrow");
      setFlex("");
      return arrowBindHover();
    };
    return {
      init: init,
      setFlex: setFlex,
      getFlex: getFlex,
      openFlex: openFlex,
      closeFlex: closeFlex,
      validate: validate,
      flexStatus: flexStatus,
      toggleArrow: toggleArrow,
      toggleCurrent: toggleCurrent,
      overArrow: overArrow,
      leaveArrow: leaveArrow
    };
  })();

}).call(this);
