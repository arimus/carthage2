// Generated by CoffeeScript 1.9.3
(function() {
  this.Modal = (function() {
    var check, checkFooter, close, focus, init, keydown, open, self, setContent, startListening, stopListening, win;
    self = {};
    win = $(window);
    focus = function() {
      var input;
      if (self.$modal) {
        input = self.$modal.find("input[type='text']");
        if (input.length) {
          return input.get(0).focus();
        }
      }
    };
    keydown = function(e) {
      var k;
      k = e.which;
      if (k === 27) {
        e.preventDefault();
        e.stopImmediatePropagation();
        return close();
      }
    };
    check = function() {
      if (self.$modal && self.$modal.length) {
        if (win.height() < self.$window.outerHeight() + (win.height() * 0.10)) {
          if (!self.$modal.hasClass("fluid")) {
            return self.$modal.addClass("fluid");
          }
        }
      }
    };
    open = function(template, params) {
      params = params || {};
      RocketChat.animeBack(self.$modal, function() {
        return focus();
      });
      self.opened = 1;
      if (params.listening) {
        startListening();
      }
      if (template != null) {
        setContent(template, params.data);
      }
      self.$modal.addClass("opened");
      self.$modal.removeClass("fluid");
      return setTimeout(function() {
        return focus();
      }, 200);
    };
    close = function() {
      self.$modal.addClass("closed");
      win.unbind("keydown.modal");
      return setTimeout(function() {
        self.opened = 0;
        stopListening();
        return self.$modal.removeClass("opened closed");
      }, 300);
    };
    setContent = function(template, data) {
      self.$main.empty();
      if (template) {
        if (data) {
          Blaze.renderWithData(template, data, self.$main.get(0));
        } else {
          Blaze.render(template, self.$main.get(0));
        }
        checkFooter();
        return check();
      }
    };
    checkFooter = function() {
      var buttons;
      if (self.$footer && self.$footer.length) {
        buttons = self.$footer.find("button");
        return buttons.each(function() {
          var btn;
          btn = $(this);
          if (btn.html().match(/fechar/ig)) {
            return btn.click(function(e) {
              e.preventDefault();
              return close();
            });
          }
        });
      }
    };
    startListening = function() {
      stopListening();
      return self.interval = setInterval(function() {
        return check();
      }, 100);
    };
    stopListening = function() {
      if (self.interval) {
        return clearInterval(self.interval);
      }
    };
    init = function($modal, params) {
      self.params = params || {};
      self.opened = 0;
      self.initialized = 0;
      self.$modal = $modal.length ? $modal : $(".rocket-modal");
      if (self.$modal.length) {
        self.initialized = 0;
        self.$window = self.$modal.find(".modal");
        self.$main = self.$modal.find("main");
        self.$close = self.$modal.find("header > .close");
        self.$footer = self.$modal.find("footer");
        self.$close.unbind("click").click(close);
        win.unbind("resize.modal").bind("resize.modal", check);
        return win.unbind("keydown.modal").bind("keydown.modal", function(e) {
          return keydown(e);
        });
      }
    };
    return {
      init: init,
      open: open,
      close: close,
      focus: focus,
      setContent: setContent
    };
  })();

}).call(this);
