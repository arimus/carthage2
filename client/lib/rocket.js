// Generated by CoffeeScript 1.9.3
(function() {
  RocketChat.Login = (function() {
    var check, onBlur, onClick;
    onClick = function(el) {
      var $el;
      $el = $(el);
      if ($el.length) {
        $el.addClass("active");
        return $el.find("input").focus();
      }
    };
    onBlur = function(input) {
      var $input;
      $input = $(input);
      if ($input.length) {
        if (input.value === "") {
          return $input.parents(".input-text").removeClass("active");
        }
      }
    };
    check = function(form) {
      var $form, inputs;
      $form = $(form);
      if ($form.length) {
        inputs = $form.find("input");
        return inputs.each(function() {
          if (this.value !== "") {
            console.log(this.value);
            return $(this).parents(".input-text").addClass("active");
          }
        });
      }
    };
    return {
      check: check,
      onClick: onClick,
      onBlur: onBlur
    };
  })();

  RocketChat.Button = (function() {
    var done, loading, reset, time;
    time = void 0;
    loading = function(el) {
      var $el, html, next;
      $el = $(el);
      next = el.attr("data-loading-text");
      html = el.find("span").html();
      el.addClass("-progress").attr("data-def-text", html).find("span").html(next);
      return time = setTimeout(function() {
        return el.addClass("going");
      }, 1);
    };
    done = function(el) {
      var $el;
      $el = $(el);
      return el.addClass("done");
    };
    reset = function(el) {
      var $el, html;
      if (time) {
        clearTimeout(time);
      }
      $el = $(el);
      html = $el.attr("data-def-text");
      if (html) {
        $el.find("span").html(html);
      }
      return $el.removeClass("-progress going done");
    };
    return {
      done: done,
      loading: loading,
      reset: reset
    };
  })();

  RocketChat.animationSupport = function() {
    var animeEnd, prefixA, prefixB, support, transEndEventNames;
    animeEnd = {
      WebkitAnimation: "webkitAnimationEnd",
      OAnimation: "oAnimationEnd",
      msAnimation: "MSAnimationEnd",
      animation: "animationend"
    };
    transEndEventNames = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "oTransitionEnd otransitionend",
      msTransition: "MSTransitionEnd",
      transition: "transitionend"
    };
    prefixB = transEndEventNames[Modernizr.prefixed("transition")];
    prefixA = animeEnd[Modernizr.prefixed("animation")];
    support = Modernizr.cssanimations;
    return {
      support: support,
      animation: prefixA,
      transition: prefixB
    };
  };

  RocketChat.animeBack = function(el, callback, type) {
    var p, s;
    el = $(el);
    if (!el.length > 0) {
      if (callback) {
        callback(el);
      }
      return;
    }
    s = animationSupport();
    p = (type ? s.animation : s.transition);
    el.one(p, function(e) {
      callback(e);
    });
  };

  RocketChat.preLoadImgs = function(urls, callback) {
    var L_, ended, i, im, loaded, preLoader;
    L_ = function(x) {
      var ended, imgs, loaded;
      if (x.width > 0) {
        $(x).addClass("loaded").removeClass("loading");
        loaded = $(".loaded", preLoader);
        if (loaded.length === urls.length && !ended) {
          ended = 1;
          imgs = preLoader.children();
          callback(imgs);
          preLoader.remove();
        }
      }
    };
    im = new Array();
    preLoader = $("<div/>").attr({
      id: "perverter-preloader"
    });
    loaded = void 0;
    ended = void 0;
    i = 0;
    while (i < urls.length) {
      im[i] = new Image();
      im[i].onload = function() {
        L_(this);
      };
      $(im[i]).appendTo(preLoader).addClass("loading");
      im[i].src = urls[i];
      if (im[i].width > 0) {
        L_(im[i]);
      }
      i++;
    }
  };

}).call(this);
