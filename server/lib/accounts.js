// Generated by CoffeeScript 1.9.3
(function() {
  var resetPasswordText, verifyEmailText;

  Accounts.emailTemplates.siteName = "ROCKET.CHAT";

  Accounts.emailTemplates.from = "ROCKET.CHAT <no-reply@rocket.chat>";

  verifyEmailText = Accounts.emailTemplates.verifyEmail.text;

  Accounts.emailTemplates.verifyEmail.text = function(user, url) {
    url = url.replace(Meteor.absoluteUrl(), Meteor.absoluteUrl() + 'login/');
    return verifyEmailText(user, url);
  };

  resetPasswordText = Accounts.emailTemplates.resetPassword.text;

  Accounts.emailTemplates.resetPassword.text = function(user, url) {
    url = url.replace(Meteor.absoluteUrl(), Meteor.absoluteUrl() + 'login/');
    return verifyEmailText(user, url);
  };

  Accounts.onCreateUser(function(options, user) {
    var ref, ref1, ref2, ref3, ref4, ref5, serviceName;
    user.status = 'offline';
    serviceName = null;
    if (((ref = user.services) != null ? ref.facebook : void 0) != null) {
      serviceName = 'facebook';
    } else if (((ref1 = user.services) != null ? ref1.google : void 0) != null) {
      serviceName = 'google';
    } else if (((ref2 = user.services) != null ? ref2.github : void 0) != null) {
      serviceName = 'github';
    } else if (((ref3 = user.services) != null ? ref3['meteor-developer'] : void 0) != null) {
      serviceName = 'meteor-developer';
    }
    if (serviceName === 'facebook' || serviceName === 'google' || serviceName === 'meteor-developer' || serviceName === 'github') {
      if (((user != null ? user.name : void 0) == null) || user.name === '') {
        if (((ref4 = options.profile) != null ? ref4.name : void 0) != null) {
          user.name = (ref5 = options.profile) != null ? ref5.name : void 0;
        } else if (user.services[serviceName].name != null) {
          user.name = user.services[serviceName].name;
        } else {
          user.name = user.services[serviceName].username;
        }
      }
      user.emails = [
        {
          address: user.services[serviceName].email,
          verified: true
        }
      ];
    }
    return user;
  });

  Accounts.validateLoginAttempt(function(login) {
    var validEmail;
    login = RocketChat.callbacks.run('beforeValidateLogin', login);
    if (login.allowed !== true) {
      return login.allowed;
    }
    if (login.type === 'password' && RocketChat.settings.get('Accounts_denyUnverifiedEmails' === true)) {
      validEmail = login.user.emails.filter(function(email) {
        return email.verified === true;
      });
      if (validEmail.length === 0) {
        throw new Meteor.Error('no-valid-email');
        return false;
      }
    }
    Meteor.users.update({
      _id: login.user._id
    }, {
      $set: {
        lastLogin: new Date
      }
    });
    Meteor.defer(function() {
      return RocketChat.callbacks.run('afterValidateLogin', login);
    });
    return true;
  });

}).call(this);
