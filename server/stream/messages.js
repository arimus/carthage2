// Generated by CoffeeScript 1.9.3
(function() {
  var msgStream;

  msgStream = new Meteor.Stream('messages');

  msgStream.permissions.write(function(eventName) {
    console.log('stream.permissions.write', this.userId);
    return false;
  });

  msgStream.permissions.read(function(eventName) {
    var canAccess, e;
    console.log('stream.permissions.read', this.userId, eventName);
    try {
      canAccess = Meteor.call('canAccessRoom', eventName, this.userId);
      if (!canAccess) {
        return false;
      }
      return true;
    } catch (_error) {
      e = _error;
      return false;
    }
  });

  Meteor.startup(function() {
    var filter, options;
    filter = {
      $or: [
        {
          ts: {
            $gt: new Date()
          }
        }, {
          ets: {
            $gt: new Date()
          }
        }
      ],
      _deleted: {
        $ne: true
      }
    };
    options = {};
    console.log('Message.find(', JSON.stringify(filter, null, '  '), JSON.stringify(options, null, '  '), ')');
    ChatMessage.find(filter, options).observe({
      added: function(record) {
        console.log('added ->'.red, record);
        return msgStream.emit(record.rid, record);
      },
      changed: function(record) {
        console.log('changed ->'.red, record);
        return msgStream.emit(record.rid, record);
      }
    });
    return ChatMessage.find({
      _deleted: true
    }, {
      fields: {
        rid: 1,
        _id: 1
      }
    }).observeChanges({
      added: function(_id, record) {
        return msgStream.emit(record.rid, {
          _id: _id,
          _deleted: true
        });
      },
      changed: function(_id, record) {
        msgStream.emit(record.rid, {
          _id: _id,
          _deleted: true
        });
        return ChatMessage.remove({
          _id: message.id,
          'u._id': Meteor.userId()
        });
      }
    });
  });

}).call(this);
