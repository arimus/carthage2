// Generated by CoffeeScript 1.9.3
(function() {
  this.getAvatarSuggestionForUser = function(user) {
    var avatar, avatars, blob, e, email, i, j, k, len, len1, len2, ref, ref1, ref2, ref3, ref4, ref5, ref6, result, validAvatars;
    avatars = [];
    if (((ref = user.services.facebook) != null ? ref.id : void 0) != null) {
      avatars.push({
        service: 'facebook',
        url: "https://graph.facebook.com/" + user.services.facebook.id + "/picture?type=large"
      });
    }
    if ((((ref1 = user.services.google) != null ? ref1.picture : void 0) != null) && user.services.google.picture !== "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg") {
      avatars.push({
        service: 'google',
        url: user.services.google.picture
      });
    }
    if (((ref2 = user.services.github) != null ? ref2.username : void 0) != null) {
      avatars.push({
        service: 'github',
        url: "https://avatars.githubusercontent.com/" + user.services.github.username + "?s=200"
      });
    }
    if (((ref3 = user.services.linkedin) != null ? ref3.pictureUrl : void 0) != null) {
      avatars.push({
        service: 'linkedin',
        url: user.services.linkedin.pictureUrl
      });
    }
    if (((ref4 = user.emails) != null ? ref4.length : void 0) > 0) {
      ref5 = user.emails;
      for (i = 0, len = ref5.length; i < len; i++) {
        email = ref5[i];
        if (email.verified === true) {
          avatars.push({
            service: 'gravatar',
            url: Gravatar.imageUrl(email.address, {
              "default": '404',
              size: 200,
              secure: true
            })
          });
        }
      }
      ref6 = user.emails;
      for (j = 0, len1 = ref6.length; j < len1; j++) {
        email = ref6[j];
        if (email.verified !== true) {
          avatars.push({
            service: 'gravatar',
            url: Gravatar.imageUrl(email.address, {
              "default": '404',
              size: 200,
              secure: true
            })
          });
        }
      }
    }
    validAvatars = {};
    for (k = 0, len2 = avatars.length; k < len2; k++) {
      avatar = avatars[k];
      try {
        result = HTTP.get(avatar.url, {
          npmRequestOptions: {
            encoding: 'binary'
          }
        });
        if (result.statusCode === 200) {
          blob = "data:" + result.headers['content-type'] + ";base64,";
          blob += Buffer(result.content, 'binary').toString('base64');
          avatar.blob = blob;
          avatar.contentType = result.headers['content-type'];
          validAvatars[avatar.service] = avatar;
        }
      } catch (_error) {
        e = _error;
      }
    }
    return validAvatars;
  };

  Meteor.methods({
    getAvatarSuggestion: function() {
      var user;
      if (!Meteor.userId()) {
        throw new Meteor.Error(203, '[methods] getAvatarSuggestion -> Usuário não logado');
      }
      user = Meteor.user();
      return getAvatarSuggestionForUser(user);
    }
  });

}).call(this);
