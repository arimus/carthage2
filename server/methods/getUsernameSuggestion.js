// Generated by CoffeeScript 1.9.3
(function() {
  var slug, usernameIsAvaliable;

  slug = function(text) {
    text = slugify(text, '.');
    return text.replace(/[^0-9a-z-_.]/g, '');
  };

  usernameIsAvaliable = function(username) {
    if (username.length < 1) {
      return false;
    }
    return !Meteor.users.findOne({
      username: {
        $regex: new RegExp(username, "i")
      }
    });
  };

  this.generateSuggestion = function(user) {
    var email, first, i, index, item, j, k, last, len, len1, len2, nameParts, ref, ref1, ref2, ref3, ref4, service, serviceName, username, usernames;
    usernames = [];
    username = void 0;
    usernames.push(slug(user.name));
    nameParts = user.name.split();
    if (nameParts.length > 1) {
      first = nameParts[0];
      last = nameParts[nameParts.length - 1];
      usernames.push(slug(first[0] + last));
      usernames.push(slug(first + last[0]));
    }
    if (((ref = user.profile) != null ? ref.name : void 0) != null) {
      usernames.push(slug(user.profile.name));
    }
    if (user.services != null) {
      ref1 = user.services;
      for (serviceName in ref1) {
        service = ref1[serviceName];
        if (service.name != null) {
          usernames.push(slug(service.name));
        } else if (service.username != null) {
          usernames.push(slug(service.username));
        }
      }
    }
    if (((ref2 = user.emails) != null ? ref2.length : void 0) > 0) {
      ref3 = user.emails;
      for (i = 0, len = ref3.length; i < len; i++) {
        email = ref3[i];
        if (email.verified === true) {
          usernames.push(slug(email.address.replace(/@.+$/, '')));
        }
      }
      ref4 = user.emails;
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        email = ref4[j];
        if (email.verified === true) {
          usernames.push(slug(email.address.replace(/(.+)@(\w+).+/, '$1.$2')));
        }
      }
    }
    for (k = 0, len2 = usernames.length; k < len2; k++) {
      item = usernames[k];
      if (usernameIsAvaliable(item)) {
        username = item;
        break;
      }
    }
    if ((usernames[0] != null) && usernames[0].length > 0) {
      index = 0;
      while (username == null) {
        index++;
        if (usernameIsAvaliable(usernames[0] + '-' + index)) {
          username = usernames[0] + '-' + index;
        }
      }
    }
    if (usernameIsAvaliable(username)) {
      return username;
    }
    return void 0;
  };

  Meteor.methods({
    getUsernameSuggestion: function() {
      var user;
      if (!Meteor.userId()) {
        throw new Meteor.Error(203, '[methods] getUsernameSuggestion -> Usuário não logado');
      }
      user = Meteor.user();
      return generateSuggestion(user);
    }
  });

}).call(this);
