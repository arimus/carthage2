// Generated by CoffeeScript 1.9.3
(function() {
  Meteor.publish('roomSearch', function(selector, options, collName) {
    var roomSelector, searchType, self, subHandleRooms, subHandleUsers;
    if (!this.userId) {
      return this.ready();
    }
    console.log('[publish] roomSearch -> '.green, 'selector:', selector, 'options:', options, 'collName:', collName);
    self = this;
    searchType = null;
    subHandleUsers = null;
    subHandleRooms = null;
    if (selector.type) {
      searchType = selector.type;
      delete selector.type;
    }
    if ((searchType == null) || searchType === 'u') {
      subHandleUsers = Meteor.users.find(selector, {
        limit: 10,
        fields: {
          name: 1,
          username: 1,
          status: 1
        }
      }).observeChanges({
        added: function(id, fields) {
          var data;
          data = {
            type: 'u',
            uid: id,
            name: fields.name,
            username: fields.username,
            status: fields.status
          };
          return self.added("autocompleteRecords", id, data);
        },
        changed: function(id, fields) {
          return self.changed("autocompleteRecords", id, fields);
        },
        removed: function(id) {
          return self.removed("autocompleteRecords", id);
        }
      });
    }
    if ((searchType == null) || searchType === 'r') {
      roomSelector = _.extend({
        t: {
          $in: ['c', 'p']
        },
        usernames: Meteor.users.findOne(this.userId).username
      }, selector);
      subHandleRooms = ChatRoom.find(roomSelector, {
        limit: 10,
        fields: {
          t: 1,
          name: 1
        }
      }).observeChanges({
        added: function(id, fields) {
          var data;
          data = {
            type: 'r',
            rid: id,
            name: fields.name,
            t: fields.t
          };
          return self.added("autocompleteRecords", id, data);
        },
        changed: function(id, fields) {
          return self.changed("autocompleteRecords", id, fields);
        },
        removed: function(id) {
          return self.removed("autocompleteRecords", id);
        }
      });
    }
    this.ready();
    return this.onStop(function() {
      if (subHandleUsers != null) {
        subHandleUsers.stop();
      }
      return subHandleRooms != null ? subHandleRooms.stop() : void 0;
    });
  });

}).call(this);
